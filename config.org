#+title: GNU Emacs configuration
#+author: Srijan Choudhary
#+email: srijan4@gmail.com
#+language: en
#+options: ':t toc:nil num:t author:t email:t
#+startup: content indent
#+macro: latest-export-date (eval (format-time-string "%F %T %z"))
#+macro: word-count (eval (count-words (point-min) (point-max)))

*Last revised and exported on {{{latest-export-date}}} with a word
count of {{{word-count}}}.*

This is my literate Emacs configuration file.

I use minimal-emacs.d as the baseline for my config. It provides two main files:
- early-init.el
- init.el

Apart from these, it allows me to insert configuration as required into the following files:
- pre-early-init.el
- post-early-init.el
- pre-init.el
- post-init.el


When I want to modify my Emacs setup, I edit this file and then
evaluate the following code block or do =C-c C-v C-t=. All files will
be updated accordingly.

#+begin_src emacs-lisp :tangle no :results none
(org-babel-tangle)
#+end_src


* Configuration

** pre-early-init

This file has the config that has to be loaded before the rest of the minimal-emacs.d code is run

#+begin_src emacs-lisp :tangle "pre-early-init.el"
  ;;; pre-early-init.el --- -*- no-byte-compile: t; lexical-binding: t; -*-

  (setq minimal-emacs-ui-features '(context-menu menu-bar dialogs tooltips))

  ;; Reducing clutter in ~/.emacs.d by redirecting files to ~/emacs.d/var/
  (setq minimal-emacs-var-dir (expand-file-name "var/" minimal-emacs-user-directory))
  (setq package-user-dir (expand-file-name "elpa" minimal-emacs-var-dir))
  (setq user-emacs-directory minimal-emacs-var-dir)

  ;; By default, minimal-emacs-package-initialize-and-refresh is set to t, which
  ;; makes minimal-emacs.d call the built-in package manager. Since Elpaca will
  ;; replace the package manager, there is no need to call it.
  (setq minimal-emacs-package-initialize-and-refresh nil)
#+end_src

** post-early-init

#+begin_src emacs-lisp :tangle "post-early-init.el"
;;; post-early-init.el --- -*- no-byte-compile: t; lexical-binding: t; -*-
#+end_src

** pre-init

#+begin_src emacs-lisp :tangle "pre-init.el"
  ;;; pre-init.el --- -*- no-byte-compile: t; lexical-binding: t; -*-
#+end_src

*** Elpaca

#+begin_src emacs-lisp :tangle "pre-init.el"
  (defvar elpaca-installer-version 0.9)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil :depth 1 :inherit ignore
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                    ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                    ,@(when-let* ((depth (plist-get order :depth)))
                                                        (list (format "--depth=%d" depth) "--no-single-branch"))
                                                    ,(plist-get order :repo) ,repo))))
                    ((zerop (call-process "git" nil buffer t "checkout"
                                          (or (plist-get order :ref) "--"))))
                    (emacs (concat invocation-directory invocation-name))
                    ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                          "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                    ((require 'elpaca))
                    ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  ;; Optional: Install use-package support
  (elpaca elpaca-use-package
    (elpaca-use-package-mode))
#+end_src

** post-init

#+begin_src emacs-lisp :tangle "post-init.el"
  ;;; post-init.el --- -*- no-byte-compile: t; lexical-binding: t; -*-
#+end_src

*** Compile Angel
Speed up Emacs by Automatically Byte-compiling and Native-compiling all .el files

TODO: Need to evaluate how much speedup this gives

https://github.com/jamescherti/minimal-emacs.d/?tab=readme-ov-file#compile-angel---speed-up-emacs-by-automatically-byte-compiling-and-native-compiling-all-el-files

#+begin_src emacs-lisp :tangle "post-init.el"
  (use-package compile-angel
    :ensure t
    :demand t
    :config
    ;; Set `compile-angel-verbose` to nil to suppress output from compile-angel.
    ;; Drawback: The minibuffer will not display compile-angel's actions.
    (setq compile-angel-verbose nil)

    (compile-angel-on-load-mode)
    (add-hook 'emacs-lisp-mode-hook #'compile-angel-on-save-local-mode))
#+end_src

*** To Import

#+begin_src emacs-lisp :tangle "post-init.el"
  ;;; Custom file

  (setq custom-file null-device)

  ;; Auto-revert in Emacs is a feature that automatically updates the
  ;; contents of a buffer to reflect changes made to the underlying file
  ;; on disk.
  (add-hook 'after-init-hook #'global-auto-revert-mode)

  ;; recentf is an Emacs package that maintains a list of recently
  ;; accessed files, making it easier to reopen files you have worked on
  ;; recently.
  (add-hook 'after-init-hook #'recentf-mode)

  ;; savehist is an Emacs feature that preserves the minibuffer history between
  ;; sessions. It saves the history of inputs in the minibuffer, such as commands,
  ;; search strings, and other prompts, to a file. This allows users to retain
  ;; their minibuffer history across Emacs restarts.
  (add-hook 'after-init-hook #'savehist-mode)

  ;; save-place-mode enables Emacs to remember the last location within a file
  ;; upon reopening. This feature is particularly beneficial for resuming work at
  ;; the precise point where you previously left off.
  (add-hook 'after-init-hook #'save-place-mode)

  (use-package vertico
    ;; (Note: It is recommended to also enable the savehist package.)
    :ensure t
    :demand t
    :commands vertico-mode
    :init (vertico-mode))
  ;; :hook (after-init . vertico-mode))

  (use-package orderless
    ;; Vertico leverages Orderless' flexible matching capabilities, allowing users
    ;; to input multiple patterns separated by spaces, which Orderless then
    ;; matches in any order against the candidates.
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))

  (use-package marginalia
    ;; Marginalia allows Embark to offer you preconfigured actions in more contexts.
    ;; In addition to that, Marginalia also enhances Vertico by adding rich
    ;; annotations to the completion candidates displayed in Vertico's interface.
    :ensure t
    :demand t
    :commands (marginalia-mode marginalia-cycle)
    :init (marginalia-mode))
  ;; :hook (after-init . marginalia-mode))

  (use-package embark
    ;; Embark is an Emacs package that acts like a context menu, allowing
    ;; users to perform context-sensitive actions on selected items
    ;; directly from the completion interface.
    :ensure t
    :defer t
    :commands (embark-act
               embark-dwim
               embark-export
               embark-collect
               embark-bindings
               embark-prefix-help-command)
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init
    (setq prefix-help-command #'embark-prefix-help-command)

    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  (use-package embark-consult
    :ensure t
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

  (use-package consult
    :ensure t
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)
           ("C-x b" . consult-buffer)
           ("C-x 4 b" . consult-buffer-other-window)
           ("C-x 5 b" . consult-buffer-other-frame)
           ("C-x t b" . consult-buffer-other-tab)
           ("C-x r b" . consult-bookmark)
           ("C-x p b" . consult-project-buffer)
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)
           ("M-g g" . consult-goto-line)
           ("M-g M-g" . consult-goto-line)
           ("M-g o" . consult-outline)
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)
           ("M-s e" . consult-isearch-history)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)
           ("M-r" . consult-history))

    ;; Enable automatic preview at point in the *Completions* buffer.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    :init
    ;; Optionally configure the register formatting. This improves the register
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    :config
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))
    (setq consult-narrow-key "<"))

  (use-package outline-indent
    :ensure t
    :defer t
    :commands outline-indent-minor-mode

    :init
    ;; The minor mode can also be automatically activated for a certain modes.
    ;; For example for Python and YAML:
    (add-hook 'python-mode-hook #'outline-indent-minor-mode)
    (add-hook 'python-ts-mode-hook #'outline-indent-minor-mode)

    (add-hook 'yaml-mode-hook #'outline-indent-minor-mode)
    (add-hook 'yaml-ts-mode-hook #'outline-indent-minor-mode)

    :custom
    (outline-indent-ellipsis " ▼ "))

  ;; evil-want-keybinding must be declared before Evil and Evil Collection
  (setq evil-want-keybinding nil)

  (use-package evil
    :ensure t
    :init
    (setq evil-undo-system 'undo-fu)
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :custom
    (evil-want-Y-yank-to-eol t)
    :config
    (evil-select-search-module 'evil-search-module 'evil-search)
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

  (use-package undo-fu
    :ensure t
    :commands (undo-fu-only-undo
               undo-fu-only-redo
               undo-fu-only-redo-all
               undo-fu-disable-checkpoint)
    :custom
    ;; 3 times the default values
    (undo-limit (* 3 160000))
    (undo-strong-limit (* 3 240000)))

  (use-package undo-fu-session
    :ensure t
    :config
    (undo-fu-session-global-mode))

  (use-package vim-tab-bar
    :ensure t
    :commands vim-tab-bar-mode
    :hook (after-init . vim-tab-bar-mode))

  (use-package evil-visualstar
    :after evil
    :ensure t
    :defer t
    :commands global-evil-visualstar-mode
    :hook (after-init . global-evil-visualstar-mode))

  (use-package evil-surround
    :after evil
    :ensure t
    :defer t
    :commands global-evil-surround-mode
    :custom
    (evil-surround-pairs-alist
     '((?\( . ("(" . ")"))
       (?\[ . ("[" . "]"))
       (?\{ . ("{" . "}"))

       (?\) . ("(" . ")"))
       (?\] . ("[" . "]"))
       (?\} . ("{" . "}"))

       (?< . ("<" . ">"))
       (?> . ("<" . ">"))))
    :hook (after-init . global-evil-surround-mode))

  (with-eval-after-load "evil"
    (evil-define-operator my-evil-comment-or-uncomment (beg end)
      "Toggle comment for the region between BEG and END."
      (interactive "<r>")
      (comment-or-uncomment-region beg end))
    (evil-define-key 'normal 'global (kbd "gc") 'my-evil-comment-or-uncomment))

  (use-package evil-snipe
    :defer t
    :commands evil-snipe-mode
    :init (evil-snipe-mode 1))
  ;; :hook (after-init . evil-snipe-mode))

  (use-package eglot
    :ensure nil
    :defer t
    :commands (eglot
               eglot-ensure
               eglot-rename
               eglot-format-buffer))

  (use-package corfu
    :ensure t
    :defer t
    :commands (corfu-mode global-corfu-mode)

    :hook ((prog-mode . corfu-mode)
           (shell-mode . corfu-mode)
           (eshell-mode . corfu-mode))

    :custom
    ;; Hide commands in M-x which do not apply to the current mode.
    (read-extended-command-predicate #'command-completion-default-include-p)
    ;; Disable Ispell completion function. As an alternative try `cape-dict'.
    (text-mode-ispell-word-completion nil)
    (tab-always-indent 'complete)

    ;; Enable Corfu
    :config
    (global-corfu-mode))

  (use-package cape
    :ensure t
    :defer t
    :commands (cape-dabbrev cape-file cape-elisp-block)
    :bind ("C-c p" . cape-prefix-map)
    :init
    ;; Add to the global default value of `completion-at-point-functions' which is
    ;; used by `completion-at-point'.
    (add-hook 'completion-at-point-functions #'cape-dabbrev)
    (add-hook 'completion-at-point-functions #'cape-file)
    (add-hook 'completion-at-point-functions #'cape-elisp-block))


  ;; Hide warnings and display only errors
  (setq warning-minimum-level :error)

  (use-package which-key
    :ensure nil ; builtin
    :defer t
    :commands which-key-mode
    :hook (after-init . which-key-mode)
    :custom
    (which-key-idle-delay 1.5)
    (which-key-idle-secondary-delay 0.25)
    (which-key-add-column-padding 1)
    (which-key-max-description-length 40))

  ;; Disable momentum-based scrolling for precise control and enable smoother scrolling.
  (setq pixel-scroll-precision-use-momentum 1)
  (pixel-scroll-precision-mode 1)

  ;; Pixel Scroll Precision Mode on Emacs for macOS: If you're using a pre-built
  ;; emacs-mac (version <= 29.1), smooth scrolling is handled by the Mac port
  ;; code, which overrides `pixel-scroll-precision-mode'. In this case, use the
  ;; following line instead of enabling `pixel-scroll-precision-mode':
  ;;
  ;; (pixel-scroll-mode 1)
  ;;
  ;; For more details, see:
  ;; https://bitbucket.org/mituharu/emacs-mac/commits/65c6c96f27afa446df6f9d8eff63f9cc012cc738

  ;; Display the time in the modeline
  (display-time-mode 1)

  ;; Paren match highlighting
  (show-paren-mode 1)

  ;; Track changes in the window configuration, allowing undoing actions such as
  ;; closing windows.
  (winner-mode 1)

  ;; Replace selected text with typed text
  (delete-selection-mode 1)

  ;; Configure Emacs to ask for confirmation before exiting
  ;; (setq confirm-kill-emacs 'y-or-n-p)

  (use-package uniquify
    :ensure nil
    :custom
    (uniquify-buffer-name-style 'reverse)
    (uniquify-separator "•")
    (uniquify-after-kill-buffer-p t)
    (uniquify-ignore-buffers-re "^\\*"))

  ;; Window dividers separate windows visually. Window dividers are bars that can
  ;; be dragged with the mouse, thus allowing you to easily resize adjacent
  ;; windows.
  ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Window-Dividers.html
  (add-hook 'after-init-hook #'window-divider-mode)

  ;; Automatically hide file details (permissions, size, modification date, etc.)
  ;; in Dired buffers for a cleaner display.
  (add-hook 'dired-mode-hook #'dired-hide-details-mode)


  ;;; Personal Information

  (setq user-full-name "Srijan Choudhary"
        user-mail-address "srijan4@gmail.com")

#+end_src
